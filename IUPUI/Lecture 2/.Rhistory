# na.rm removes the NA values
data  %>% group_by(Year) %>% summarise(average_revenue=mean(Revenue..Millions., na.rm = T)) %>%
ggplot() + geom_point(aes(x=Year, y=average_revenue))
# Q1: Make a bar plot of the average revenue vs year
# Hint: use group_by and summarise
# na.rm removes the NA values
data  %>% group_by(Year) %>% summarise(average_revenue=mean(Revenue..Millions., na.rm = T)) %>%
ggplot(aes(x=Year, y=average_revenue)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% group_by(Year)
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% group_by(Genre) %>% summarise(average_runtime=mean(Runtime..Minutes., na.rm = TRUE)) %>%
ggplot(aes(x=Genre, y=average_runtime)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% group_by(Genre) %>% summarise(average_runtime=mean(Runtime..Minutes., na.rm = TRUE))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% seperate(Genre, c("G1", "G2", "G3")) %>%
group_by(G1) %>%
summarise(avg_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
arrange(desc(avg_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3")) %>%
group_by(G1) %>%
summarise(avg_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
arrange(desc(avg_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3")) %>%
group_by(G1) %>%
summarise(avg_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
arrange(desc(avg_runtime))
# we will use dplyr inside tidyverse
# https://genomicsclass.github.io/book/pages/dplyr_tutorial.html
install.packages("dplyr")
install.packages("ggplot2")
library(dplyr)
install.packages("dplyr")
library(ggplot2)
install.packages("ggplot2")
data <- read.csv("/Users/onurucar/Desktop/Github/Data-Science/IUPUI/Lecture 2/IMDB-MovieData.csv")
install.packages("ggplot2")
# Q1: Make a bar plot of the average revenue vs year
# Hint: use group_by and summarise
# na.rm removes the NA values
# ggplot --> https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html
data  %>% group_by(Year) %>% summarise(average_revenue=mean(Revenue..Millions., na.rm = TRUE)) %>%
ggplot(aes(x=Year, y=average_revenue)) + geom_point()
data <- read.csv("/Users/onurucar/Desktop/Github/Data-Science/IUPUI/Lecture 2/IMDB-MovieData.csv")
# example of filter
metaScoreGreaterThan90 <- filter(data, Metascore >= 90)
# we will use dplyr inside tidyverse
# https://genomicsclass.github.io/book/pages/dplyr_tutorial.html
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
data <- read.csv("/Users/onurucar/Desktop/Github/Data-Science/IUPUI/Lecture 2/IMDB-MovieData.csv")
# example of filter
metaScoreGreaterThan90 <- filter(data, Metascore >= 90)
# Q1: Make a bar plot of the average revenue vs year
# Hint: use group_by and summarise
# na.rm removes the NA values
# ggplot --> https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html
data  %>% group_by(Year) %>% summarise(average_revenue=mean(Revenue..Millions., na.rm = TRUE)) %>%
ggplot(aes(x=Year, y=average_revenue)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3")) %>%
group_by(G1) %>%
summarise(avg_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
arrange(desc(avg_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3")) %>%
group_by(G1) %>%
summarise(avg_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
arrange(desc(avg_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3")) %>%
group_by(G1) %>%
summarise(avg_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
arrange(desc(avg_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(avg_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
arrange(desc(avg_runtime))
install.packages("tidyr")
library(tidyr)
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(avg_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
arrange(desc(avg_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=Year, y=average_runtime)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
# we will use dplyr inside tidyverse
# https://genomicsclass.github.io/book/pages/dplyr_tutorial.html
library(dplyr)
library(ggplot2)
library(tidyr)
data <- read.csv("/Users/onurucar/Desktop/Github/Data-Science/IUPUI/Lecture 2/IMDB-MovieData.csv")
# example of filter
metaScoreGreaterThan90 <- filter(data, Metascore >= 90)
# we will use dplyr inside tidyverse
# https://genomicsclass.github.io/book/pages/dplyr_tutorial.html
library(dplyr)
library(ggplot2)
library(tidyr)
data <- read.csv("/Users/onurucar/Desktop/Github/Data-Science/IUPUI/Lecture 2/IMDB-MovieData.csv")
# example of filter
metaScoreGreaterThan90 <- filter(data, Metascore >= 90)
# Q1: Make a bar plot of the average revenue vs year
# Hint: use group_by and summarise
# na.rm removes the NA values
# ggplot --> https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html
data  %>% group_by(Year) %>% summarise(average_revenue=mean(Revenue..Millions., na.rm = TRUE)) %>%
ggplot(aes(x=Year, y=average_revenue)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
2+4
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=Year, y=average_runtime)) + geom_boxplot()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=data$Year, y=average_runtime)) + geom_boxplot()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=data$Year, y=average_runtime)) + geom_boxplot()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
secondData <- data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=data$Year, y=average_runtime)) + geom_boxplot()
secondData$data
secondData$data$G1
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
secondData <- data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=data$Year, y=average_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
secondData <- data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=data$Year, y=average_runtime)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
secondData <- data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=data$Year, y=average_runtime)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=data$Year, y=average_runtime)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=data$Year, y=average_runtime)) + geom_point(fill=c('steelblue'))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_point(fill=c('steelblue'))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_box(fill=c('steelblue'))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_boxplot(fill=c('steelblue'))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_histogram(fill=c('steelblue'))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar(fill=c('steelblue'))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(y=average_runtime)) + geom_bar()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1)) + geom_bar()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_histogram()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot() + geom_histogram(aes(x=G1, y=average_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot() + geom_histogram(aes(x=G1, y=average_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot() + geom_histogram(aes(y=average_runtime))
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1)) + geom_histogram()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot() + geom_histogram()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1)) + geom_histogram(y=average_runtime)
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime, fill=variable)) + geom_bar(stat='identity', position = 'dodge')
sep
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime, fill=variable)) + geom_bar(stat='identity', position = 'dodge')
ggplot(aes(x=G1, y=average_runtime) + geom_bar(stat='identity')
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar(stat='identity')
data <- read.csv("/Users/onurucar/Desktop/Github/Data-Science/IUPUI/Lecture 2/IMDB-MovieData.csv")
# example of filter
metaScoreGreaterThan90 <- filter(data, Metascore >= 90)
# Q1: Make a bar plot of the average revenue vs year
# Hint: use group_by and summarise
# na.rm removes the NA values
# ggplot --> https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html
data  %>% group_by(Year) %>% summarise(average_revenue=mean(Revenue..Millions., na.rm = TRUE)) %>%
ggplot(aes(x=Year, y=average_revenue)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar(stat='identity')
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar(stat='identity')
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar(stat='identity', fill="orange")
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar(stat='identity')
# Bar plot -> for visualization purposes
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
summarise(max(average_runtime))
# Bar plot -> for visualization purposes
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
summarise(abc = max(average_runtime))
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
summarise(abc = max(average_runtime))
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T))
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T))
summarise(max(average_runtime, na.rm=T))
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T))
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T))
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T))
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
summarise(max(average_runtime, na.rm=T))
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime = mean(Runtime..Minutes., na.rm=T)) %>%
summarise(maximum_runtime = max(average_runtime, na.rm=T)) %>%
print(maximum_runtime)
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
# Bar plot -> for visualization purposes
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar(stat='identity')
# Q1: Make a bar plot of the average revenue vs year
# Hint: use group_by and summarise
# na.rm removes the NA values
# ggplot --> https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html
data  %>% group_by(Year) %>% summarise(average_revenue=mean(Revenue..Millions., na.rm = TRUE)) %>%
ggplot(aes(x=Year, y=average_revenue)) + geom_point()
# Which movie genre in the data has the longest avarage runtime?
# Hint: analyze the first listed genre, which you can extract using “separate”.
# Then use group_by and summarise
# Bar plot -> for visualization purposes
data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime=mean(Runtime..Minutes., na.rm=T)) %>%
ggplot(aes(x=G1, y=average_runtime)) + geom_bar(stat='identity')
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime = mean(Runtime..Minutes., na.rm=T)) %>%
summarise(maximum_runtime = max(average_runtime, na.rm=T)) %>%
print(maximum_runtime)
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime = mean(Runtime..Minutes., na.rm=T)) %>%
summarise(maximum_runtime = max(average_runtime, na.rm=T)) %>%
print(G1$maximum_runtime)
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime = mean(Runtime..Minutes., na.rm=T)) %>%
summarise(maximum_runtime = max(average_runtime, na.rm=T)) %>%
print(secondData$G1$maximum_runtime)
View(secondData)
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime = mean(Runtime..Minutes., na.rm=T)) %>%
summarise(maximum_runtime = max(average_runtime, na.rm=T)) %>%
print(maximum_runtime)
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime = mean(Runtime..Minutes., na.rm=T)) %>%
summarise(maximum_runtime = max(average_runtime, na.rm=T)) %>%
print(maximum_runtime)
# print the longest avarage runtime
secondData = data %>% separate(Genre, c("G1", "G2", "G3"), sep=",") %>%
group_by(G1) %>%
summarise(average_runtime = mean(Runtime..Minutes., na.rm=T)) %>%
summarise(maximum_runtime = max(average_runtime, na.rm=T)) %>%
print(secondData$maximum_runtime)
